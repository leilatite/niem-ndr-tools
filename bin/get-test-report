#!/usr/bin/env bash

#HELP:COMMAND_NAME: run NDR Schematron rules against an XML document, producing a report
#HELP:Usage: COMMAND_NAME option* $file-to-test.xml

root_dir=$(dirname "$0")/..
. "$root_dir/share/wrtools-core/opt_help.bash"
. "$root_dir/share/wrtools-core/opt_verbose.bash"
. "$root_dir/share/wrtools-core/fail.bash"
. "$root_dir/share/wrtools-core/temp.bash"

share_dir=${root_dir}/share/niem-ndr-tools
ndr_artifacts_dir=${share_dir}/niem-ndr-artifacts

NDR_ID_MAP=${ndr_artifacts_dir}/ndr-id-map.xml
[[ -f $NDR_ID_MAP && -r $NDR_ID_MAP ]] \
  || fail "Can't read NDR ID map file $NDR_ID_MAP"

ANNOTATE_SVRL_XSL=${share_dir}/annotate-svrl.xsl
[[ -f $ANNOTATE_SVRL_XSL && -r $ANNOTATE_SVRL_XSL ]] \
  || fail "Can't read SVRL annotation XSLT $ANNOTATE_SVRL_XSL"

ANNOTATED_SVRL_TO_TEXT_XSL=${share_dir}/annotated-svrl-to-text.xsl
[[ -f $ANNOTATED_SVRL_TO_TEXT_XSL && -r $ANNOTATED_SVRL_TO_TEXT_XSL ]] \
  || fail "Can't read SVRL-to-text XSLT $ANNOTATED_SVRL_TO_TEXT_XSL"

#HELP:Options:
#HELP:  --help | -h: print this help
#HELP:  --verbose | -v: print debugging and status output
#HELP:  --keep-temps | -k: Don't delete temporary files

#HELP:  --rules=$code | -r $code: use NIEM NDR rule set for conformance target $code
#HELP:      codes: ref, ext, ins, set
unset RULES
opt_rules () {
    [[ is-set != ${RULES+is-set} ]] || fail "Only one of options --rules and --auto-rules may be used"
    case "$1" in 
        ext | ins | ref | set ) RULES="$1";;
        * ) fail "Unknown conformance target code: $1. Expecting ext, ins, ref, or set.";;
    esac
}

#HELP:  --auto-rules | -a: set rules by autodetecting conformance targets
opt_auto_rules () {
    [[ is-set != ${RULES+is-set} ]] || fail "Only one of options --rules and --auto-rules may be used"
    RULES=auto
}

#HELP:  --xml-catalog=$xml-catalog | -c $xml-catalog: Use XML catalog for cross-references
unset XML_CATALOG
opt_xml_catalog () {
    (( $# == 1 )) || fail "function $FUNCNAME requires 1 arg: an XML catalog file"
    [[ -f $1 && -r $1 ]] || fail "argument to option --xml-catalog is not a readable file"
    XML_CATALOG=$1
}

#HELP:  --brief | -b: Yield brief report, for diffs
BRIEF=false
opt_brief () {
    (( $# == 0 )) || fail "function $FUNCNAME requires 0 args (got $#)"
    BRIEF=true
}

OPTIND=1
while getopts :abc:hkr:v-: OPTION
do
    case "$OPTION" in
        a ) opt_auto_rules;;
        b ) opt_brief;;
        c ) opt_xml_catalog "$OPTARG";;
        h ) opt_help;;
        k ) opt_keep_temps;;
        r ) opt_rules "$OPTARG";;
        v ) opt_verbose;;
        - )
            case "$OPTARG" in
                auto-rules ) opt_auto_rules;;
                brief ) opt_brief;;
                help ) opt_help;;
                keep-temps ) opt_keep_temps;;
                rules=* ) opt_rules "${OPTARG#*=}";;
                verbose ) opt_verbose;;
                xml-catalog=* ) opt_xml_catalog "${OPTARG#*=}";;
                rules | xml-catalog ) fail "Missing required argument for long option \"$OPTARG\"";;
                help=* | verbose=* | auto-rules=* | keep-temps=* ) fail "No argument expected for long option \"${OPTARG%%=*}\"";;
                *=* ) fail "Unexpected long option (with argument) \"${OPTARG%%=*}\"";;
                * ) fail "Unexpected long option \"$OPTARG\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail "bad state OPTARG=\"$OPTARG\"";;
    esac
done
shift $((OPTIND-1))

[[ is-set = ${RULES+is-set} ]] || fail "One of options --rules and --auto-rules must be used"

(( $# == 1 )) || fail "Must have one file to validate (got $#)"
[[ -f $1 && -r $1 ]] || fail "File to validate \"$1\" must be a readable file"

temp_make_file SVRL_RESULTS

if [[ $RULES = auto ]]
then
    unset RULES
    while read -rd $'\n'
    do  vecho found conformance target "$REPLY"
        case "$REPLY" in
            "http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/#ReferenceSchemaDocument" )
                RULES=ref
                ;;
            "http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/#ExtensionSchemaDocument" )
                RULES=ext
                ;;
            * )
                printf "Warning: ignoring unknown conformance target %q\n" "$REPLY" >&2
                ;;
        esac
    done < <(get-conformance-target-uris "$1")
    [[ is-set = ${RULES+is-set} ]] || fail "No conformance target identified for file \"$1\""
fi

[[ is-set = ${RULES+is-set} ]] || fail "No rules specified for file \"$1\""

SCHEMA=${ndr_artifacts_dir}/ndr-rules-conformance-target-"$RULES".sch.xsl
[[ -f $SCHEMA && -r $SCHEMA ]] || fail "Schematron schema XSLT is not a readable file (\"$SCHEMA\")"
vecho "Validating against Schematron schema \"$1\""

COMMAND=(schematron-execute --xslt-file="$SCHEMA" --format=svrl)
if [[ ${XML_CATALOG:+is-set} ]]
then COMMAND+=(--param=+xml-catalog="$XML_CATALOG")
fi
COMMAND+=("$1")

vrun "${COMMAND[@]}" > "$SVRL_RESULTS"

temp_make_file ANNOTATED_SVRL_RESULTS UNSORTED_TEST_REPORT

vrun xalan \
     --in="$SVRL_RESULTS" \
     --xsl="$ANNOTATE_SVRL_XSL" \
     --out="$ANNOTATED_SVRL_RESULTS" \
     --param=ndr-id-map="$NDR_ID_MAP" \
     -- -L

vrun xalan \
     --in="$ANNOTATED_SVRL_RESULTS" \
     --xsl="$ANNOTATED_SVRL_TO_TEXT_XSL" \
     --out="$UNSORTED_TEST_REPORT"

vrun sort --field-separator=: --key=1n --key=3f --key=2f "$UNSORTED_TEST_REPORT" \
  | { if [[ $BRIEF = true ]]
      then cut -d : -f 1,2,3
      else cat
      fi; }

# output spills to stdout

